Description: >
    Jatin Grover
    Deploys the Udagram (Udaccity ND Project)  servers and SecurityGroup

Parameters:
    EnvironmentName:
        Description: An Environment name which will be used to access the output of the network infra stack
        Type: String

    awsManagedPolicyForS3BucketFullAccess:
        Type: String
        Description: awsExampleIAMManagedPolicyARNOne
    
    UdagramProjectS3Bucket:
        Description: S3 bucket name
        Type: String
        
Resources:
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP port 80 to load balancer of the infra
      VpcId:
        Fn::ImportValue: !Sub "VPCID-${EnvironmentName}" 
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  ApplicationTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 90
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 45
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId:
            Fn::ImportValue: !Sub VPCID-${EnvironmentName}
  
  LoadBalancer: #Application Load balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LoadBalancerSecGroup

  #adding a listner for the load baalancer to check for connection requests

  LoadBalancerlistener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
     DefaultActions:
      - Type: "forward"
        TargetGroupArn:
          Ref: ApplicationTargetGroup
     LoadBalancerArn: !Ref LoadBalancer
     Port: 80
     Protocol: "HTTP"

  #Custom rule for the listener
  CustomListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'ApplicationTargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'LoadBalancerlistener'
      Priority: 50000 #Highest Priority

  WebServerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
          GroupDescription: Allow http to  hosts and SSH from local only 
          VpcId:
            Fn::ImportValue: !Sub "VPCID-${EnvironmentName}"
          SecurityGroupIngress: 
          - IpProtocol: tcp # Ingress: HTTP access
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp  # Ingress: SSH access
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress: 
          - IpProtocol: tcp # Egress: open ports to access the internet
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

  S3DataAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref awsManagedPolicyForS3BucketFullAccess

  RootInstanceIAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref S3DataAccessRole

  LaunchConfigForWebServer: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install unzip awscli -y
          yum install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 sync ${UdagramProjectS3Bucket} .
          unzip -o udacity.
      ImageId: ami-003634241a8fcdec0
      IamInstanceProfile: !Ref RootInstanceIAMProfile
      SecurityGroups: 
        - Ref: WebServerSecurityGroup
      InstanceType: "t3.medium" # to provide 4 gigs of RAM
      BlockDeviceMappings: 
        - DeviceName: /dev/sdk
          Ebs: 
            VolumeSize: 10
            DeleteOnTermination: "true"
      
  ApplicationAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: 
        Ref: LaunchConfigForWebServer
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs: 
        - !Ref ApplicationTargetGroup
    
Outputs:
  LoadBalancerDNS:
    Description: DNS for Load Balancer in order to access the applicaation servers
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
    Export:
      Name: !Sub "${EnvironmentName}-LB-DNS"